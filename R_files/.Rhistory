show_alt = TRUE, mu1 = mu1,
show_beta = TRUE, show_power = TRUE, two_sided = FALSE)
hyp.testing <- function(mu0, stdev, signif.level,
sample.mean, n,
show_crit, show_pvalue,
show_alt, mu1, show_beta, show_power,
two_sided) {
x <- seq(from = mu0 - 4 * stdev, to = mu0 + 4 * stdev, length.out = 3000)
y <- dnorm(x, mean=mu0, sd=stdev)
if (mu1 <= mu0) {
main_title <- paste("H0: mu = ", mu0, " vs H1: mu < ", mu0, sep = "")
plt <- plot(x, y, type = "l", ylim = c(-0.002, max(y) + 0.03), xlim = c(mu0 - 2.5 * stdev, mu0 + 2.5 * stdev), lwd = 6, main = main_title, ylab = "Density")
} else {
main_title <- paste("H0: mu = ", mu0, " vs H1: mu > ", mu0, sep = "")
plt <- plot(x, y, type = "l", ylim = c(-0.002, max(y) + 0.03), xlim = c(mu0 - 2.5 * stdev, mu0 + 2.5 * stdev), lwd = 6, main = main_title, ylab = "Density")
}
abline(v = mu0)
z_score <- (abs(sample.mean - mu0)) / (stdev / sqrt(n))
crit_area <- function(leftTail) {
if (leftTail) {
desired_percentile <- qnorm(signif.level)
crit_start <- ((desired_percentile * stdev) / sqrt(n)) + mu0
if (show_crit) {
polygon(x = c(x[x<=crit_start]-0.07, crit_start, min(x)) , y = c(y[x<=crit_start], 0, 0), density = 10, angle = 315, col = "red")
}
} else {
desired_percentile <- qnorm(1-signif.level)
crit_start <- ((desired_percentile * stdev) / sqrt(n)) + mu0
if (show_crit) {
polygon(x = c(x[x>=crit_start]-0.07, max(x), crit_start) , y = c(y[x>=crit_start], 0, 0), density = 10, angle = 315, col = "red", lwd = 2)
}
}
return(crit_start)
}
if (sample.mean <= mu0) {
p_value <- pnorm(z_score)
crit_start <- crit_area(leftTail = TRUE)
if (show_pvalue) {
polygon(x = c(x[x<=sample.mean]-0.07, sample.mean, min(x)) , y = c(y[x<=sample.mean], 0, 0), density = 10, angle = 45, col = rgb(0.957, 0.702, 0.248, alpha = 0.8), lwd = 2)
}
} else {
p_value <- 1 - pnorm(z_score)
crit_start <- crit_area(leftTail = FALSE)
if (show_pvalue) {
polygon(x = c(x[x>=sample.mean]-0.07, max(x), sample.mean) , y = c(y[x>=sample.mean], 0, 0), density = 10, angle = 45, col = rgb(0.957, 0.702, 0.248, alpha = 0.8), lwd = 2)
}
}
segments(x0 = sample.mean, y0 = 0, x1 = sample.mean, y1 = dnorm(sample.mean, mean=mu0, sd=stdev), col = rgb(0.957, 0.702, 0.248, alpha = 0.8), lwd = 5)
crit_text <- paste("Critical Region Sup = ", round(crit_start, 2), sep = "")
sample_text <- paste("Sample Statistic = ", round(sample.mean, 2), sep = "")
p_text <- paste("p-value = ", round(p_value, 6), sep = "")
legend("topleft", c(crit_text, sample_text, p_text), xjust = 0.5, cex = 0.8)
if (show_beta | show_power) {
x1 <- seq(from = mu1 - 3 * stdev, to = mu1 + 3 * stdev, length.out = 3000)
y1 <- dnorm(x1, mean=mu1, sd=stdev)
lines(x1, y1)
if (show_alt) {
abline(v = mu1)
}
}
if (show_beta) {
polygon(x = c(crit_start, seq(mu1 - 4 * stdev, crit_start, 0.01)), y = c(0, dnorm(seq(mu1 - 4 * stdev, crit_start, 0.01), mu1, stdev)), density = -1, col = rgb(40, 117, 239, alpha = 180, max = 255))
}
if (show_power) {
polygon(x = c(crit_start, seq(crit_start, mu1 + 4 * stdev, 0.01)), y = c(0, dnorm(seq(crit_start, mu1 + 4 *stdev, 0.01), mu1, stdev)), density = -1, col = rgb(31, 150, 63, alpha = 180, max = 255))
}
if (show_beta & !show_power) {
beta_x <- seq(from = mu0 - 3 * stdev, to = mu0 + 3 * stdev, length.out = 3000)
beta_y <- sapply(beta_x, function(x) pnorm(crit_start, mean = x, sd = stdev))
plot(beta_x, beta_y, type = "l", ylim = c(-0.002, max(beta_y) + 0.03), xlim = c(mu0 - 3 * stdev, mu0 + 3 * stdev), lwd = 6, ylab = "Error type II", xlab = mu1, col = rgb(40, 117, 239, alpha = 180, max = 255))
abline(v = mu1)
} else if (!show_beta & show_power) {
beta_x <- seq(from = mu0 - 3 * stdev, to = mu0 + 3 * stdev, length.out = 3000)
beta_y <- sapply(beta_x, function(x) pnorm(crit_start, mean = x, sd = stdev))
plot(beta_x, 1 - beta_y, type = "l", ylim = c(-0.002, max(beta_y) + 0.03), xlim = c(mu0 - 3 * stdev, mu0 + 3 * stdev), lwd = 6, ylab = "Power", xlab = mu1, col = rgb(31, 150, 63, alpha = 180, max = 255))
abline(v = mu1)
} else if (show_beta & show_power) {
beta_x <- seq(from = mu0 - 3 * stdev, to = mu0 + 3 * stdev, length.out = 3000)
beta_y <- sapply(beta_x, function(x) pnorm(crit_start, mean = x, sd = stdev))
plot(beta_x, beta_y, type = "l", ylim = c(-0.002, max(beta_y) + 0.03), xlim = c(mu0 - 3 * stdev, mu0 + 3 * stdev), lwd = 6, ylab = "Error type II and Power", xlab = mu1, col = rgb(40, 117, 239, alpha = 180, max = 255))
lines(beta_x, 1 - beta_y, col = rgb(31, 150, 63, alpha = 180, max = 255), lwd = 6)
abline(v = mu1)
text_beta <- pnorm(crit_start, mean = mu1, sd = stdev)
text(crit_start, text_beta, adj = 0, round(text_beta, 4), cex = 0.7)
text_power <- 1 - text_beta
text(crit_start, text_power, adj = 0, round(text_power, 4), cex = 0.7)
}
}
hyp.testing(mu0 = mu0, stdev = stdev, signif.level = signif.level,
sample.mean = sample.mean, n = n,
show_crit = TRUE, show_pvalue = TRUE,
show_alt = TRUE, mu1 = mu1,
show_beta = TRUE, show_power = TRUE, two_sided = FALSE)
hyp.testing <- function(mu0, stdev, signif.level,
sample.mean, n,
show_crit, show_pvalue,
show_alt, mu1, show_beta, show_power,
two_sided) {
x <- seq(from = mu0 - 4 * stdev, to = mu0 + 4 * stdev, length.out = 3000)
y <- dnorm(x, mean=mu0, sd=stdev)
if (mu1 <= mu0) {
main_title <- paste("H0: mu = ", mu0, " vs H1: mu < ", mu0, sep = "")
plt <- plot(x, y, type = "l", ylim = c(-0.002, max(y) + 0.03), xlim = c(mu0 - 2.5 * stdev, mu0 + 2.5 * stdev), lwd = 6, main = main_title, ylab = "Density")
} else {
main_title <- paste("H0: mu = ", mu0, " vs H1: mu > ", mu0, sep = "")
plt <- plot(x, y, type = "l", ylim = c(-0.002, max(y) + 0.03), xlim = c(mu0 - 2.5 * stdev, mu0 + 2.5 * stdev), lwd = 6, main = main_title, ylab = "Density")
}
abline(v = mu0)
z_score <- (abs(sample.mean - mu0)) / (stdev / sqrt(n))
crit_area <- function(leftTail) {
if (leftTail) {
desired_percentile <- qnorm(signif.level)
crit_start <- ((desired_percentile * stdev) / sqrt(n)) + mu0
if (show_crit) {
polygon(x = c(x[x<=crit_start]-0.07, crit_start, min(x)) , y = c(y[x<=crit_start], 0, 0), density = 10, angle = 315, col = "red")
}
} else {
desired_percentile <- qnorm(1-signif.level)
crit_start <- ((desired_percentile * stdev) / sqrt(n)) + mu0
if (show_crit) {
polygon(x = c(x[x>=crit_start]-0.07, max(x), crit_start) , y = c(y[x>=crit_start], 0, 0), density = 10, angle = 315, col = "red", lwd = 2)
}
}
return(crit_start)
}
if (sample.mean <= mu0) {
p_value <- pnorm(z_score)
crit_start <- crit_area(leftTail = TRUE)
if (show_pvalue) {
polygon(x = c(x[x<=sample.mean]-0.07, sample.mean, min(x)) , y = c(y[x<=sample.mean], 0, 0), density = 10, angle = 45, col = rgb(0.957, 0.702, 0.248, alpha = 0.8), lwd = 2)
}
} else {
p_value <- 1 - pnorm(z_score)
crit_start <- crit_area(leftTail = FALSE)
if (show_pvalue) {
polygon(x = c(x[x>=sample.mean]-0.07, max(x), sample.mean) , y = c(y[x>=sample.mean], 0, 0), density = 10, angle = 45, col = rgb(0.957, 0.702, 0.248, alpha = 0.8), lwd = 2)
}
}
segments(x0 = sample.mean, y0 = 0, x1 = sample.mean, y1 = dnorm(sample.mean, mean=mu0, sd=stdev), col = rgb(0.957, 0.702, 0.248, alpha = 0.8), lwd = 5)
crit_text <- paste("Critical Region Sup = ", round(crit_start, 2), sep = "")
sample_text <- paste("Sample Statistic = ", round(sample.mean, 2), sep = "")
p_text <- paste("p-value = ", round(p_value, 6), sep = "")
legend("topleft", c(crit_text, sample_text, p_text), xjust = 0.5, cex = 0.8)
if (show_beta | show_power) {
x1 <- seq(from = mu1 - 3 * stdev, to = mu1 + 3 * stdev, length.out = 3000)
y1 <- dnorm(x1, mean=mu1, sd=stdev)
lines(x1, y1)
if (show_alt) {
abline(v = mu1)
}
}
if (show_beta) {
polygon(x = c(crit_start, seq(mu1 - 4 * stdev, crit_start, 0.01)), y = c(0, dnorm(seq(mu1 - 4 * stdev, crit_start, 0.01), mu1, stdev)), density = -1, col = rgb(40, 117, 239, alpha = 180, max = 255))
}
if (show_power) {
polygon(x = c(crit_start, seq(crit_start, mu1 + 4 * stdev, 0.01)), y = c(0, dnorm(seq(crit_start, mu1 + 4 *stdev, 0.01), mu1, stdev)), density = -1, col = rgb(31, 150, 63, alpha = 180, max = 255))
}
if (show_beta & !show_power) {
beta_x <- seq(from = mu0 - 3 * stdev, to = mu0 + 3 * stdev, length.out = 3000)
beta_y <- sapply(beta_x, function(x) pnorm(crit_start, mean = x, sd = stdev))
plot(beta_x, beta_y, type = "l", ylim = c(-0.002, max(beta_y) + 0.03), xlim = c(mu0 - 3 * stdev, mu0 + 3 * stdev), lwd = 6, ylab = "Error type II", xlab = mu1, col = rgb(40, 117, 239, alpha = 180, max = 255))
abline(v = mu1)
} else if (!show_beta & show_power) {
beta_x <- seq(from = mu0 - 3 * stdev, to = mu0 + 3 * stdev, length.out = 3000)
beta_y <- sapply(beta_x, function(x) pnorm(crit_start, mean = x, sd = stdev))
plot(beta_x, 1 - beta_y, type = "l", ylim = c(-0.002, max(beta_y) + 0.03), xlim = c(mu0 - 3 * stdev, mu0 + 3 * stdev), lwd = 6, ylab = "Power", xlab = mu1, col = rgb(31, 150, 63, alpha = 180, max = 255))
abline(v = mu1)
} else if (show_beta & show_power) {
beta_x <- seq(from = mu0 - 3 * stdev, to = mu0 + 3 * stdev, length.out = 3000)
beta_y <- sapply(beta_x, function(x) pnorm(crit_start, mean = x, sd = stdev))
plot(beta_x, beta_y, type = "l", ylim = c(-0.002, max(beta_y) + 0.03), xlim = c(mu0 - 3 * stdev, mu0 + 3 * stdev), lwd = 6, ylab = "Error type II and Power", xlab = mu1, col = rgb(40, 117, 239, alpha = 180, max = 255))
lines(beta_x, 1 - beta_y, col = rgb(31, 150, 63, alpha = 180, max = 255), lwd = 6)
abline(v = mu1)
text_beta <- pnorm(crit_start, mean = mu1, sd = stdev)
text(crit_start + 1, text_beta, adj = 0, round(text_beta, 4), cex = 0.8)
text_power <- 1 - text_beta
text(crit_start + 1, text_power, adj = 0, round(text_power, 4), cex = 0.8)
}
}
hyp.testing(mu0 = mu0, stdev = stdev, signif.level = signif.level,
sample.mean = sample.mean, n = n,
show_crit = TRUE, show_pvalue = TRUE,
show_alt = TRUE, mu1 = mu1,
show_beta = TRUE, show_power = TRUE, two_sided = FALSE)
hyp.testing <- function(mu0, stdev, signif.level,
sample.mean, n,
show_crit, show_pvalue,
show_alt, mu1, show_beta, show_power,
two_sided) {
x <- seq(from = mu0 - 4 * stdev, to = mu0 + 4 * stdev, length.out = 3000)
y <- dnorm(x, mean=mu0, sd=stdev)
if (mu1 <= mu0) {
main_title <- paste("H0: mu = ", mu0, " vs H1: mu < ", mu0, sep = "")
plt <- plot(x, y, type = "l", ylim = c(-0.002, max(y) + 0.03), xlim = c(mu0 - 2.5 * stdev, mu0 + 2.5 * stdev), lwd = 6, main = main_title, ylab = "Density")
} else {
main_title <- paste("H0: mu = ", mu0, " vs H1: mu > ", mu0, sep = "")
plt <- plot(x, y, type = "l", ylim = c(-0.002, max(y) + 0.03), xlim = c(mu0 - 2.5 * stdev, mu0 + 2.5 * stdev), lwd = 6, main = main_title, ylab = "Density")
}
abline(v = mu0)
z_score <- (abs(sample.mean - mu0)) / (stdev / sqrt(n))
crit_area <- function(leftTail) {
if (leftTail) {
desired_percentile <- qnorm(signif.level)
crit_start <- ((desired_percentile * stdev) / sqrt(n)) + mu0
if (show_crit) {
polygon(x = c(x[x<=crit_start]-0.07, crit_start, min(x)) , y = c(y[x<=crit_start], 0, 0), density = 10, angle = 315, col = "red")
}
} else {
desired_percentile <- qnorm(1-signif.level)
crit_start <- ((desired_percentile * stdev) / sqrt(n)) + mu0
if (show_crit) {
polygon(x = c(x[x>=crit_start]-0.07, max(x), crit_start) , y = c(y[x>=crit_start], 0, 0), density = 10, angle = 315, col = "red", lwd = 2)
}
}
return(crit_start)
}
if (sample.mean <= mu0) {
p_value <- pnorm(z_score)
crit_start <- crit_area(leftTail = TRUE)
if (show_pvalue) {
polygon(x = c(x[x<=sample.mean]-0.07, sample.mean, min(x)) , y = c(y[x<=sample.mean], 0, 0), density = 10, angle = 45, col = rgb(0.957, 0.702, 0.248, alpha = 0.8), lwd = 2)
}
} else {
p_value <- 1 - pnorm(z_score)
crit_start <- crit_area(leftTail = FALSE)
if (show_pvalue) {
polygon(x = c(x[x>=sample.mean]-0.07, max(x), sample.mean) , y = c(y[x>=sample.mean], 0, 0), density = 10, angle = 45, col = rgb(0.957, 0.702, 0.248, alpha = 0.8), lwd = 2)
}
}
segments(x0 = sample.mean, y0 = 0, x1 = sample.mean, y1 = dnorm(sample.mean, mean=mu0, sd=stdev), col = rgb(0.957, 0.702, 0.248, alpha = 0.8), lwd = 5)
crit_text <- paste("Critical Region Sup = ", round(crit_start, 2), sep = "")
sample_text <- paste("Sample Statistic = ", round(sample.mean, 2), sep = "")
p_text <- paste("p-value = ", round(p_value, 6), sep = "")
legend("topleft", c(crit_text, sample_text, p_text), xjust = 0.5, cex = 0.8)
if (show_beta | show_power) {
x1 <- seq(from = mu1 - 3 * stdev, to = mu1 + 3 * stdev, length.out = 3000)
y1 <- dnorm(x1, mean=mu1, sd=stdev)
lines(x1, y1)
if (show_alt) {
abline(v = mu1)
}
}
if (show_beta) {
polygon(x = c(crit_start, seq(mu1 - 4 * stdev, crit_start, 0.01)), y = c(0, dnorm(seq(mu1 - 4 * stdev, crit_start, 0.01), mu1, stdev)), density = -1, col = rgb(40, 117, 239, alpha = 180, max = 255))
}
if (show_power) {
polygon(x = c(crit_start, seq(crit_start, mu1 + 4 * stdev, 0.01)), y = c(0, dnorm(seq(crit_start, mu1 + 4 *stdev, 0.01), mu1, stdev)), density = -1, col = rgb(31, 150, 63, alpha = 180, max = 255))
}
if (show_beta & !show_power) {
beta_x <- seq(from = mu0 - 3 * stdev, to = mu0 + 3 * stdev, length.out = 3000)
beta_y <- sapply(beta_x, function(x) pnorm(crit_start, mean = x, sd = stdev))
plot(beta_x, beta_y, type = "l", ylim = c(-0.002, max(beta_y) + 0.03), xlim = c(mu0 - 3 * stdev, mu0 + 3 * stdev), lwd = 6, ylab = "Error type II", xlab = mu1, col = rgb(40, 117, 239, alpha = 180, max = 255))
abline(v = mu1)
} else if (!show_beta & show_power) {
beta_x <- seq(from = mu0 - 3 * stdev, to = mu0 + 3 * stdev, length.out = 3000)
beta_y <- sapply(beta_x, function(x) pnorm(crit_start, mean = x, sd = stdev))
plot(beta_x, 1 - beta_y, type = "l", ylim = c(-0.002, max(beta_y) + 0.03), xlim = c(mu0 - 3 * stdev, mu0 + 3 * stdev), lwd = 6, ylab = "Power", xlab = mu1, col = rgb(31, 150, 63, alpha = 180, max = 255))
abline(v = mu1)
} else if (show_beta & show_power) {
beta_x <- seq(from = mu0 - 3 * stdev, to = mu0 + 3 * stdev, length.out = 3000)
beta_y <- sapply(beta_x, function(x) pnorm(crit_start, mean = x, sd = stdev))
plot(beta_x, beta_y, type = "l", ylim = c(-0.002, max(beta_y) + 0.03), xlim = c(mu0 - 3 * stdev, mu0 + 3 * stdev), lwd = 6, ylab = "Error type II and Power", xlab = mu1, col = rgb(40, 117, 239, alpha = 180, max = 255))
lines(beta_x, 1 - beta_y, col = rgb(31, 150, 63, alpha = 180, max = 255), lwd = 6)
abline(v = mu1)
text_beta <- pnorm(crit_start, mean = mu1, sd = stdev)
text(crit_start + 1, text_beta, adj = 0, round(text_beta, 4), cex = 0.8)
text_power <- 1 - text_beta
text(crit_start + 1, text_power, adj = 0, round(text_power, 4), cex = 0.8)
}
}
hyp.testing(mu0 = 5, stdev = stdev, signif.level = signif.level,
sample.mean = 8, n = n,
show_crit = TRUE, show_pvalue = TRUE,
show_alt = TRUE, mu1 = 7,
show_beta = TRUE, show_power = TRUE, two_sided = FALSE)
hyp.testing <- function(mu0, stdev, signif.level,
sample.mean, n,
show_crit, show_pvalue,
show_alt, mu1, show_beta, show_power,
two_sided) {
x <- seq(from = mu0 - 4 * stdev, to = mu0 + 4 * stdev, length.out = 3000)
y <- dnorm(x, mean=mu0, sd=stdev)
if (mu1 <= mu0) {
main_title <- paste("H0: mu = ", mu0, " vs H1: mu < ", mu0, sep = "")
plt <- plot(x, y, type = "l", ylim = c(-0.002, max(y) + 0.03), xlim = c(mu0 - 2.5 * stdev, mu0 + 2.5 * stdev), lwd = 6, main = main_title, ylab = "Density")
} else {
main_title <- paste("H0: mu = ", mu0, " vs H1: mu > ", mu0, sep = "")
plt <- plot(x, y, type = "l", ylim = c(-0.002, max(y) + 0.03), xlim = c(mu0 - 2.5 * stdev, mu0 + 2.5 * stdev), lwd = 6, main = main_title, ylab = "Density")
}
abline(v = mu0)
z_score <- (abs(sample.mean - mu0)) / (stdev / sqrt(n))
crit_area <- function(leftTail) {
if (leftTail) {
desired_percentile <- qnorm(signif.level)
crit_start <- ((desired_percentile * stdev) / sqrt(n)) + mu0
if (show_crit) {
polygon(x = c(x[x<=crit_start]-0.07, crit_start, min(x)) , y = c(y[x<=crit_start], 0, 0), density = 10, angle = 315, col = "red")
}
} else {
desired_percentile <- qnorm(1-signif.level)
crit_start <- ((desired_percentile * stdev) / sqrt(n)) + mu0
if (show_crit) {
polygon(x = c(x[x>=crit_start]-0.07, max(x), crit_start) , y = c(y[x>=crit_start], 0, 0), density = 10, angle = 315, col = "red", lwd = 2)
}
}
return(crit_start)
}
if (sample.mean <= mu0) {
p_value <- pnorm(z_score)
crit_start <- crit_area(leftTail = TRUE)
if (show_pvalue) {
polygon(x = c(x[x<=sample.mean]-0.07, sample.mean, min(x)) , y = c(y[x<=sample.mean], 0, 0), density = 10, angle = 45, col = rgb(0.957, 0.702, 0.248, alpha = 0.8), lwd = 2)
}
} else {
p_value <- 1 - pnorm(z_score)
crit_start <- crit_area(leftTail = FALSE)
if (show_pvalue) {
polygon(x = c(x[x>=sample.mean]-0.07, max(x), sample.mean) , y = c(y[x>=sample.mean], 0, 0), density = 10, angle = 45, col = rgb(0.957, 0.702, 0.248, alpha = 0.8), lwd = 2)
}
}
segments(x0 = sample.mean, y0 = 0, x1 = sample.mean, y1 = dnorm(sample.mean, mean=mu0, sd=stdev), col = rgb(0.957, 0.702, 0.248, alpha = 0.8), lwd = 5)
crit_text <- paste("Critical Region Sup = ", round(crit_start, 2), sep = "")
sample_text <- paste("Sample Statistic = ", round(sample.mean, 2), sep = "")
p_text <- paste("p-value = ", round(p_value, 6), sep = "")
legend("topleft", c(crit_text, sample_text, p_text), xjust = 0.5, cex = 0.8)
if (show_beta | show_power) {
x1 <- seq(from = mu1 - 3 * stdev, to = mu1 + 3 * stdev, length.out = 3000)
y1 <- dnorm(x1, mean=mu1, sd=stdev)
lines(x1, y1)
if (show_alt) {
abline(v = mu1)
}
}
if (show_beta) {
polygon(x = c(crit_start, seq(mu1 - 4 * stdev, crit_start, 0.01)), y = c(0, dnorm(seq(mu1 - 4 * stdev, crit_start, 0.01), mu1, stdev)), density = -1, col = rgb(40, 117, 239, alpha = 180, max = 255))
}
if (show_power) {
polygon(x = c(crit_start, seq(crit_start, mu1 + 4 * stdev, 0.01)), y = c(0, dnorm(seq(crit_start, mu1 + 4 *stdev, 0.01), mu1, stdev)), density = -1, col = rgb(31, 150, 63, alpha = 180, max = 255))
}
if (show_beta & !show_power) {
beta_x <- seq(from = mu0 - 3 * stdev, to = mu0 + 3 * stdev, length.out = 3000)
beta_y <- sapply(beta_x, function(x) pnorm(crit_start, mean = x, sd = stdev))
plot(beta_x, beta_y, type = "l", ylim = c(-0.002, max(beta_y) + 0.03), xlim = c(mu0 - 3 * stdev, mu0 + 3 * stdev), lwd = 6, ylab = "Error type II", xlab = mu1, col = rgb(40, 117, 239, alpha = 180, max = 255))
abline(v = mu1)
} else if (!show_beta & show_power) {
beta_x <- seq(from = mu0 - 3 * stdev, to = mu0 + 3 * stdev, length.out = 3000)
beta_y <- sapply(beta_x, function(x) pnorm(crit_start, mean = x, sd = stdev))
plot(beta_x, 1 - beta_y, type = "l", ylim = c(-0.002, max(beta_y) + 0.03), xlim = c(mu0 - 3 * stdev, mu0 + 3 * stdev), lwd = 6, ylab = "Power", xlab = mu1, col = rgb(31, 150, 63, alpha = 180, max = 255))
abline(v = mu1)
} else if (show_beta & show_power) {
beta_x <- seq(from = mu0 - 3 * stdev, to = mu0 + 3 * stdev, length.out = 3000)
beta_y <- sapply(beta_x, function(x) pnorm(crit_start, mean = x, sd = stdev))
plot(beta_x, beta_y, type = "l", ylim = c(-0.002, max(beta_y) + 0.03), xlim = c(mu0 - 3 * stdev, mu0 + 3 * stdev), lwd = 6, ylab = "Error type II and Power", xlab = mu1, col = rgb(40, 117, 239, alpha = 180, max = 255))
lines(beta_x, 1 - beta_y, col = rgb(31, 150, 63, alpha = 180, max = 255), lwd = 6)
abline(v = mu1)
text_beta <- pnorm(crit_start, mean = mu1, sd = stdev)
text(crit_start + 1, text_beta, adj = 0, round(text_beta, 4), cex = 0.8)
text_power <- 1 - text_beta
text(crit_start + 1, text_power, adj = 0, round(text_power, 4), cex = 0.8)
}
}
hyp.testing(mu0 = 5, stdev = stdev, signif.level = signif.level,
sample.mean = 2, n = n,
show_crit = TRUE, show_pvalue = TRUE,
show_alt = TRUE, mu1 = 3,
show_beta = TRUE, show_power = TRUE, two_sided = FALSE)
hyp.testing <- function(mu0, stdev, signif.level,
sample.mean, n,
show_crit, show_pvalue,
show_alt, mu1, show_beta, show_power,
two_sided) {
x <- seq(from = mu0 - 4 * stdev, to = mu0 + 4 * stdev, length.out = 3000)
y <- dnorm(x, mean=mu0, sd=stdev)
if (mu1 <= mu0) {
main_title <- paste("H0: mu = ", mu0, " vs H1: mu < ", mu0, sep = "")
plt <- plot(x, y, type = "l", ylim = c(-0.002, max(y) + 0.03), xlim = c(mu0 - 2.5 * stdev, mu0 + 2.5 * stdev), lwd = 6, main = main_title, ylab = "Density")
} else {
main_title <- paste("H0: mu = ", mu0, " vs H1: mu > ", mu0, sep = "")
plt <- plot(x, y, type = "l", ylim = c(-0.002, max(y) + 0.03), xlim = c(mu0 - 2.5 * stdev, mu0 + 2.5 * stdev), lwd = 6, main = main_title, ylab = "Density")
}
abline(v = mu0)
z_score <- (abs(sample.mean - mu0)) / (stdev / sqrt(n))
crit_area <- function(leftTail) {
if (leftTail) {
desired_percentile <- qnorm(signif.level)
crit_start <- ((desired_percentile * stdev) / sqrt(n)) + mu0
if (show_crit) {
polygon(x = c(x[x<=crit_start]-0.07, crit_start, min(x)) , y = c(y[x<=crit_start], 0, 0), density = 10, angle = 315, col = "red")
}
} else {
desired_percentile <- qnorm(1-signif.level)
crit_start <- ((desired_percentile * stdev) / sqrt(n)) + mu0
if (show_crit) {
polygon(x = c(x[x>=crit_start]-0.07, max(x), crit_start) , y = c(y[x>=crit_start], 0, 0), density = 10, angle = 315, col = "red", lwd = 2)
}
}
return(crit_start)
}
if (sample.mean <= mu0) {
p_value <- pnorm(z_score)
crit_start <- crit_area(leftTail = TRUE)
if (show_pvalue) {
polygon(x = c(x[x<=sample.mean]-0.07, sample.mean, min(x)) , y = c(y[x<=sample.mean], 0, 0), density = 10, angle = 45, col = rgb(0.957, 0.702, 0.248, alpha = 0.8), lwd = 2)
}
} else {
p_value <- 1 - pnorm(z_score)
crit_start <- crit_area(leftTail = FALSE)
if (show_pvalue) {
polygon(x = c(x[x>=sample.mean]-0.07, max(x), sample.mean) , y = c(y[x>=sample.mean], 0, 0), density = 10, angle = 45, col = rgb(0.957, 0.702, 0.248, alpha = 0.8), lwd = 2)
}
}
segments(x0 = sample.mean, y0 = 0, x1 = sample.mean, y1 = dnorm(sample.mean, mean=mu0, sd=stdev), col = rgb(0.957, 0.702, 0.248, alpha = 0.8), lwd = 5)
crit_text <- paste("Critical Region Sup = ", round(crit_start, 2), sep = "")
sample_text <- paste("Sample Statistic = ", round(sample.mean, 2), sep = "")
p_text <- paste("p-value = ", round(p_value, 6), sep = "")
legend("topleft", c(crit_text, sample_text, p_text), xjust = 0.5, cex = 0.8)
if (show_beta | show_power) {
x1 <- seq(from = mu1 - 3 * stdev, to = mu1 + 3 * stdev, length.out = 3000)
y1 <- dnorm(x1, mean=mu1, sd=stdev)
lines(x1, y1)
if (show_alt) {
abline(v = mu1)
}
}
if (mu1 >= mu0) {
if (show_beta) {
polygon(x = c(crit_start, seq(mu1 - 4 * stdev, crit_start, 0.01)), y = c(0, dnorm(seq(mu1 - 4 * stdev, crit_start, 0.01), mu1, stdev)), density = -1, col = rgb(40, 117, 239, alpha = 180, max = 255))
}
if (show_power) {
polygon(x = c(crit_start, seq(crit_start, mu1 + 4 * stdev, 0.01)), y = c(0, dnorm(seq(crit_start, mu1 + 4 *stdev, 0.01), mu1, stdev)), density = -1, col = rgb(31, 150, 63, alpha = 180, max = 255))
}
if (show_beta & !show_power) {
beta_x <- seq(from = mu0 - 3 * stdev, to = mu0 + 3 * stdev, length.out = 3000)
beta_y <- sapply(beta_x, function(x) pnorm(crit_start, mean = x, sd = stdev))
plot(beta_x, beta_y, type = "l", ylim = c(-0.002, max(beta_y) + 0.03), xlim = c(mu0 - 3 * stdev, mu0 + 3 * stdev), lwd = 6, ylab = "Error type II", xlab = mu1, col = rgb(40, 117, 239, alpha = 180, max = 255))
abline(v = mu1)
} else if (!show_beta & show_power) {
beta_x <- seq(from = mu0 - 3 * stdev, to = mu0 + 3 * stdev, length.out = 3000)
beta_y <- sapply(beta_x, function(x) pnorm(crit_start, mean = x, sd = stdev))
plot(beta_x, 1 - beta_y, type = "l", ylim = c(-0.002, max(beta_y) + 0.03), xlim = c(mu0 - 3 * stdev, mu0 + 3 * stdev), lwd = 6, ylab = "Power", xlab = mu1, col = rgb(31, 150, 63, alpha = 180, max = 255))
abline(v = mu1)
} else if (show_beta & show_power) {
beta_x <- seq(from = mu0 - 3 * stdev, to = mu0 + 3 * stdev, length.out = 3000)
beta_y <- sapply(beta_x, function(x) pnorm(crit_start, mean = x, sd = stdev))
plot(beta_x, beta_y, type = "l", ylim = c(-0.002, max(beta_y) + 0.03), xlim = c(mu0 - 3 * stdev, mu0 + 3 * stdev), lwd = 6, ylab = "Error type II and Power", xlab = mu1, col = rgb(40, 117, 239, alpha = 180, max = 255))
lines(beta_x, 1 - beta_y, col = rgb(31, 150, 63, alpha = 180, max = 255), lwd = 6)
abline(v = mu1)
text_beta <- pnorm(crit_start, mean = mu1, sd = stdev)
text(crit_start + 1, text_beta, adj = 0, round(text_beta, 4), cex = 0.8)
text_power <- 1 - text_beta
text(crit_start + 1, text_power, adj = 0, round(text_power, 4), cex = 0.8)
}
} else {
if (show_beta) {
polygon(x = c(crit_start, seq(crit_start, mu1 + 4 * stdev, 0.01)), y = c(0, dnorm(seq(crit_start, mu1 + 4 *stdev, 0.01), mu1, stdev)), density = -1, col = rgb(31, 150, 63, alpha = 180, max = 255))
}
if (show_power) {
polygon(x = c(crit_start, seq(mu1 - 4 * stdev, crit_start, 0.01)), y = c(0, dnorm(seq(mu1 - 4 * stdev, crit_start, 0.01), mu1, stdev)), density = -1, col = rgb(40, 117, 239, alpha = 180, max = 255))
}
if (show_beta & !show_power) {
beta_x <- seq(from = mu0 - 3 * stdev, to = mu0 + 3 * stdev, length.out = 3000)
beta_y <- sapply(beta_x, function(x) 1 - pnorm(crit_start, mean = x, sd = stdev))
plot(beta_x, beta_y, type = "l", ylim = c(-0.002, max(beta_y) + 0.03), xlim = c(mu0 - 3 * stdev, mu0 + 3 * stdev), lwd = 6, ylab = "Error type II", xlab = mu1, col = rgb(40, 117, 239, alpha = 180, max = 255))
abline(v = mu1)
} else if (!show_beta & show_power) {
beta_x <- seq(from = mu0 - 3 * stdev, to = mu0 + 3 * stdev, length.out = 3000)
beta_y <- sapply(beta_x, function(x) pnorm(crit_start, mean = x, sd = stdev))
plot(beta_x, 1 - beta_y, type = "l", ylim = c(-0.002, max(beta_y) + 0.03), xlim = c(mu0 - 3 * stdev, mu0 + 3 * stdev), lwd = 6, ylab = "Power", xlab = mu1, col = rgb(31, 150, 63, alpha = 180, max = 255))
abline(v = mu1)
} else if (show_beta & show_power) {
beta_x <- seq(from = mu0 - 3 * stdev, to = mu0 + 3 * stdev, length.out = 3000)
beta_y <- sapply(beta_x, function(x) 1- pnorm(crit_start, mean = x, sd = stdev))
plot(beta_x, beta_y, type = "l", ylim = c(-0.002, max(beta_y) + 0.03), xlim = c(mu0 - 3 * stdev, mu0 + 3 * stdev), lwd = 6, ylab = "Error type II and Power", xlab = mu1, col = rgb(40, 117, 239, alpha = 180, max = 255))
lines(beta_x, 1 - beta_y, col = rgb(31, 150, 63, alpha = 180, max = 255), lwd = 6)
abline(v = mu1)
text_beta <- pnorm(crit_start, mean = mu1, sd = stdev)
text(crit_start + 1, text_beta, adj = 0, round(text_beta, 4), cex = 0.8)
text_power <- 1 - text_beta
text(crit_start + 1, text_power, adj = 0, round(text_power, 4), cex = 0.8)
}
}
}
hyp.testing(mu0 = 5, stdev = stdev, signif.level = signif.level,
sample.mean = 2, n = n,
show_crit = TRUE, show_pvalue = TRUE,
show_alt = TRUE, mu1 = 3,
show_beta = TRUE, show_power = TRUE, two_sided = FALSE)
library(RSQLite)
setwd("C://Users//kgoel//Desktop//Y3 Sem1//Stat 405//Overall Project")
dcon <- dbConnect(SQLite(), dbname = "youtubelite.sqlite")
dbListTables(dcon)
dbListFields(dcon, "youtube_entries")
res <- dbSendQuery(conn = dcon, "
SELECT *
FROM youtube_entries
")
mydf <- dbFetch(res, -1)
dbClearResult(res)
head(mydf)
View(mydf)
dbDisconnect(dcon)
setwd("C://Users//kgoel//Desktop//Y3 Sem1//Stat 405//Overall Project")
dcon <- dbConnect(SQLite(), dbname = "youtubelite.sqlite")
dbListTables(dcon)
dbListFields(dcon, "youtube_entries")
res <- dbSendQuery(conn = dcon, "
SELECT *
FROM youtube_entries
")
mydf <- dbFetch(res, -1)
dbClearResult(res)
View(mydf)
